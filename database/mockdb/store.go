// Code generated by MockGen. DO NOT EDIT.
// Source: main/database/db (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination database/mockdb/store.go main/database/db Store
//
// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "main/database/db"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockStore) CreateMovie(arg0 context.Context, arg1 *db.CreateMovieParams) (*db.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", arg0, arg1)
	ret0, _ := ret[0].(*db.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockStoreMockRecorder) CreateMovie(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockStore)(nil).CreateMovie), arg0, arg1)
}

// CreateRating mocks base method.
func (m *MockStore) CreateRating(arg0 context.Context, arg1 *db.CreateRatingParams) (*db.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRating", arg0, arg1)
	ret0, _ := ret[0].(*db.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRating indicates an expected call of CreateRating.
func (mr *MockStoreMockRecorder) CreateRating(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRating", reflect.TypeOf((*MockStore)(nil).CreateRating), arg0, arg1)
}

// DeleteMovie mocks base method.
func (m *MockStore) DeleteMovie(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockStoreMockRecorder) DeleteMovie(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockStore)(nil).DeleteMovie), arg0, arg1)
}

// DeleteRating mocks base method.
func (m *MockStore) DeleteRating(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRating", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRating indicates an expected call of DeleteRating.
func (mr *MockStoreMockRecorder) DeleteRating(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRating", reflect.TypeOf((*MockStore)(nil).DeleteRating), arg0, arg1)
}

// GetMovie mocks base method.
func (m *MockStore) GetMovie(arg0 context.Context, arg1 string) (*db.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", arg0, arg1)
	ret0, _ := ret[0].(*db.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockStoreMockRecorder) GetMovie(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockStore)(nil).GetMovie), arg0, arg1)
}

// GetRating mocks base method.
func (m *MockStore) GetRating(arg0 context.Context, arg1 int64) (*db.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRating", arg0, arg1)
	ret0, _ := ret[0].(*db.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRating indicates an expected call of GetRating.
func (mr *MockStoreMockRecorder) GetRating(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRating", reflect.TypeOf((*MockStore)(nil).GetRating), arg0, arg1)
}

// ListMovies mocks base method.
func (m *MockStore) ListMovies(arg0 context.Context, arg1 *db.ListMoviesParams) ([]*db.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMovies", arg0, arg1)
	ret0, _ := ret[0].([]*db.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMovies indicates an expected call of ListMovies.
func (mr *MockStoreMockRecorder) ListMovies(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMovies", reflect.TypeOf((*MockStore)(nil).ListMovies), arg0, arg1)
}

// ListRatings mocks base method.
func (m *MockStore) ListRatings(arg0 context.Context, arg1 *db.ListRatingsParams) ([]*db.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRatings", arg0, arg1)
	ret0, _ := ret[0].([]*db.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRatings indicates an expected call of ListRatings.
func (mr *MockStoreMockRecorder) ListRatings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRatings", reflect.TypeOf((*MockStore)(nil).ListRatings), arg0, arg1)
}

// UpdateMovie mocks base method.
func (m *MockStore) UpdateMovie(arg0 context.Context, arg1 *db.UpdateMovieParams) (*db.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", arg0, arg1)
	ret0, _ := ret[0].(*db.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockStoreMockRecorder) UpdateMovie(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockStore)(nil).UpdateMovie), arg0, arg1)
}

// UpdateRating mocks base method.
func (m *MockStore) UpdateRating(arg0 context.Context, arg1 *db.UpdateRatingParams) (*db.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRating", arg0, arg1)
	ret0, _ := ret[0].(*db.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRating indicates an expected call of UpdateRating.
func (mr *MockStoreMockRecorder) UpdateRating(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockStore)(nil).UpdateRating), arg0, arg1)
}
